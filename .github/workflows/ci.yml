name: CI Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

env:
  PHP_VERSION: '8.2'
  NODE_VERSION: '18'
  MYSQL_VERSION: '8.2'

jobs:
  code-quality:
    name: Code Quality & Static Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: bcmath, ctype, fileinfo, json, mbstring, openssl, pdo, tokenizer, xml, curl, gd
          coverage: xdebug
          tools: composer:v2

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader --no-scripts

      - name: Copy environment file
        run: cp .env.example .env

      - name: Generate application key
        run: php artisan key:generate --ansi
        env:
          APP_ENV: testing

      - name: Run PHP CodeSniffer
        run: composer lint

      - name: Run PHPStan Static Analysis
        run: composer analyse

      - name: Run PHP Mess Detector
        run: composer phpmd

      - name: Run Deptrac Architecture Analysis
        run: composer deptrac
        continue-on-error: true

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: bcmath, ctype, fileinfo, json, mbstring, openssl, pdo, tokenizer, xml, curl
          tools: composer:v2

      - name: Install Composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Security Audit
        run: composer audit
        continue-on-error: true

      - name: Run Security Checker
        uses: symfonycorp/security-checker-action@v5

  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-version: ['8.2']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: bcmath, ctype, fileinfo, json, mbstring, openssl, pdo, tokenizer, xml, curl, gd
          coverage: xdebug
          tools: composer:v2

      - name: Install Composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Generate application key
        run: php artisan key:generate --ansi
        env:
          APP_ENV: testing

      - name: Generate JWT secret
        run: php artisan jwt:secret --ansi
        env:
          APP_ENV: testing

      - name: Run Unit Tests
        run: ./vendor/bin/phpunit --testsuite=Unit --coverage-clover coverage.xml
        env:
          APP_ENV: testing
          DB_CONNECTION: sqlite
          DB_DATABASE: ':memory:'
          CACHE_DRIVER: array
          SESSION_DRIVER: array
          QUEUE_DRIVER: sync
          MAIL_DRIVER: array

      - name: Upload coverage to Codecov
        if: matrix.php-version == '8.2'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  test-feature:
    name: Feature Tests
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.2
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: webapp_test
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testuser
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: bcmath, ctype, fileinfo, json, mbstring, openssl, pdo, tokenizer, xml, curl, gd, pdo_mysql
          coverage: xdebug
          tools: composer:v2

      - name: Install Composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Copy environment file
        run: cp .env.example .env

      - name: Generate application key
        run: php artisan key:generate --ansi

      - name: Generate JWT secret
        run: php artisan jwt:secret --ansi

      - name: Run database migrations
        run: php artisan migrate --ansi --force
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: webapp_test
          DB_USERNAME: testuser
          DB_PASSWORD: testuser

      - name: Run Feature Tests
        run: ./vendor/bin/phpunit --testsuite=Feature --coverage-clover coverage-feature.xml
        env:
          APP_ENV: testing
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: webapp_test
          DB_USERNAME: testuser
          DB_PASSWORD: testuser
          CACHE_DRIVER: array
          SESSION_DRIVER: array
          QUEUE_DRIVER: sync
          MAIL_DRIVER: array

      - name: Upload feature coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage-feature.xml
          flags: featuretests
          name: codecov-umbrella

  build-and-test:
    name: Build & Integration Tests
    runs-on: ubuntu-latest
    needs: [code-quality, test-unit, test-feature]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -f docker_settings/Dockerfile_php82 -t e-commerce-api:${{ github.sha }} .

      - name: Run Docker Compose
        run: |
          cp .env.example .env
          sed -i 's/DB_HOST=mysql82/DB_HOST=mysql82/' .env
          docker-compose up -d --build

      - name: Wait for services
        run: |
          sleep 30
          docker-compose exec -T php php artisan migrate --force
          docker-compose exec -T php php artisan db:seed --force

      - name: Run integration tests
        run: |
          docker-compose exec -T php ./vendor/bin/phpunit --testsuite=Feature

      - name: Check API health
        run: |
          curl -f http://localhost:8080/api/health || exit 1

      - name: Cleanup
        if: always()
        run: docker-compose down -v
